from imports_all import *

from BD import Registry
from giga import chat_completion

router = Router()

async def send_msg(bot: Bot):
    async with (aiosqlite.connect('users.db') as db):
        async with db.execute("SELECT id FROM users WHERE statusrem=TRUE") as cursor:
            rows = await cursor.fetchall()
            if rows:
                text = '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Å–æ–≤–µ—Ç:\n' + await chat_completion(0, '–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –Ω–µ–æ–±—ã—á–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –º—É—Å–æ—Ä–∞')
                for row in rows:
                    try:
                        await bot.send_message(chat_id=row[0], text=text)
                    except Exception as e:
                        logging.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {row[0]}: {e}")


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    async with aiosqlite.connect('users.db') as db:
        async with db.execute("SELECT id FROM users WHERE id = ?",
                              (message.from_user.id,)) as cursor:
            if await cursor.fetchone() is None:
                await state.set_state(Registry.name)
                await message.answer('–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è')
            else:
                await message.answer(f'–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')

@router.message(Registry.name)
async def reg_surname(message:Message, state: FSMContext):
    name = message.text
    if bool(re.match(r'^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s-]+$', name)):
        await state.update_data(name=name)
        await state.set_state(Registry.surname)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É —Ñ–∞–º–∏–ª–∏—é')
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –¥–µ—Ñ–∏—Å).')
        await cmd_start(message)


@router.message(Registry.surname)
async def reg_end(message:Message, state: FSMContext):
    surname = message.text
    if bool(re.match(r'^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s-]+$', surname)):
        await state.update_data(surname=message.text)
        data = await state.get_data()
        await state.clear()

        async with aiosqlite.connect('users.db') as db:
            await db.execute('''
                              INSERT INTO users (id, statusrem, name, surname) 
                              VALUES (?, ?, ?, ?)
                          ''', (message.from_user.id, False, data['name'], data['surname']))
            await db.commit()
        await message.answer(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n'
                            f'–í–∞—Å –∑–æ–≤—É—Ç: {data["name"]} {data["surname"]}\n'
                            f'–í–∞—à id: {message.from_user.id}')
        await cmd_help(message)
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –¥–µ—Ñ–∏—Å).')
        await reg_surname(message)


@router.message(Command("menu"))
async def cmd_menu(message: Message):
    kb_list = [
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
        [InlineKeyboardButton(text="‚ôªÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")],
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="subscribe")],
        [InlineKeyboardButton(text="üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="unsubscribe")],
        [InlineKeyboardButton(text="üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="quiz")],
        [InlineKeyboardButton(text="üí¨ –í–∫–ª—é—á–∏—Ç—å —á–∞—Ç —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º", callback_data="start_chat")],
        [InlineKeyboardButton(text="üîá –í—ã–∫–ª—é—á–∏—Ç—å —á–∞—Ç —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º", callback_data="stop_chat")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb_list)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é:", reply_markup=keyboard)



@router.callback_query(F.data=='start_chat')
async def start_chat(callback: CallbackQuery, state: State):
    await state.set_state(Registry.start_chat)
    await callback.answer('')
    await callback.message.answer('üí¨ –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —á–∞—Ç–∞ —Å –ò–ò. –ó–∞–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –º—É—Å–æ—Ä–∞! ‚ôªÔ∏è')

@router.message(Command("start_chat"))
async def start_chat(message:Message, state: FSMContext):
    await state.set_state(Registry.start_chat)
    await message.answer('üí¨ –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —á–∞—Ç–∞ —Å –ò–ò. –ó–∞–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –º—É—Å–æ—Ä–∞! ‚ôªÔ∏è')

@router.callback_query(F.data=='stop_chat')
async def stop_chat (callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer('')
    await callback.message.answer('üîï –í—ã–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —á–∞—Ç–∞ —Å –ò–ò. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã! ‚ôªÔ∏è')

@router.message(Command("stop_chat"))
async def stop_chat (message:Message, state: FSMContext):
    await state.clear()
    await message.answer('üîï –í—ã–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —á–∞—Ç–∞ —Å –ò–ò. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã! ‚ôªÔ∏è')


@router.message(Command("subscribe"))
async def ontext(message: Message):
    id = message.from_user.id
    async with aiosqlite.connect("users.db") as db:
      await db.execute("UPDATE users SET statusrem = TRUE WHERE id = ?", (id, ))
      await db.commit()
      await message.answer('‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –º—É—Å–æ—Ä–∞. ‚ôªÔ∏è')


@router.callback_query(F.data=='subscribe')
async def ontext(callback: CallbackQuery):
    id = callback.from_user.id
    async with aiosqlite.connect("users.db") as db:
      await db.execute("UPDATE users SET statusrem = TRUE WHERE id = ?", (id, ))
      await db.commit()
    await callback.message.answer('‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –º—É—Å–æ—Ä–∞. ‚ôªÔ∏è')
    await callback.answer()

@router.message(Command("unsubscribe"))
async def offtext(message: Message):
    id = message.from_user.id
    async with aiosqlite.connect("users.db") as db:
        await db.execute("UPDATE users SET statusrem = FALSE WHERE id = ?", (id, ))
        await db.commit()
    await message.answer('üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã! –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏—Ö —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è. ‚ôªÔ∏è')


@router.callback_query(F.data=="unsubscribe")
async def offtext(callback: CallbackQuery):
    id = callback.from_user.id
    async with aiosqlite.connect("users.db") as db:
        await db.execute("UPDATE users SET statusrem = FALSE WHERE id = ?", (id, ))
        await db.commit()
    await callback.message.answer('üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã! –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏—Ö —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è. ‚ôªÔ∏è')
    await callback.answer('')

help_text = (
    "–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É ü§ñ:\n"
    "üìå /start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.\n"
    "üìã /menu - –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –∫–æ–º–∞–Ω–¥–∞–º–∏.\n"
    "‚ôªÔ∏è /info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –º—É—Å–æ—Ä–∞.\n"
    "üéØ /quiz - –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π.\n"
    "‚úÖ /subscribe - –í–∫–ª—é—á–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–≤–µ—Ç–æ–≤.\n"
    "üö´ /unsubscribe - –í—ã–∫–ª—é—á–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–≤–µ—Ç–æ–≤.\n"
    "üí¨ /start_chat - –í–∫–ª—é—á–∏—Ç—å –º–æ–¥ –æ–±—â–µ–Ω–∏—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –ø–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –º—É—Å–æ—Ä–∞.\n"
    "üîá /stop_chat - –í—ã–∫–ª—é—á–∏—Ç—å –º–æ–¥ –æ–±—â–µ–Ω–∏—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –ø–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –º—É—Å–æ—Ä–∞.\n"
)

@router.callback_query(F.data == "help")
async def cmd_help(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer(help_text)

@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(help_text)


info_text = (
    "üìò –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –º—É—Å–æ—Ä–∞:\n"
    "1. –ü–ª–∞—Å—Ç–∏–∫ (PET, HDPE) - –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã.\n"
    "2. –ë—É–º–∞–≥–∞ - —Å–¥–∞–≤–∞–π—Ç–µ —á–∏—Å—Ç—É—é –∏ —Å—É—Ö—É—é.\n"
    "3. –°—Ç–µ–∫–ª–æ - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–π—Ç–µ –ø–µ—Ä–µ–¥ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–µ–π.\n"
    "4. –ú–µ—Ç–∞–ª–ª - —Å–¥–∞–≤–∞–π—Ç–µ –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–µ –∏ –∂–µ—Å—Ç—è–Ω—ã–µ –±–∞–Ω–∫–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –º–µ—Ç–∞–ª–ª–∞.\n"
    "5. –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –æ—Ç—Ö–æ–¥—ã - –∫–æ–º–ø–æ—Å—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ.\n"
    "6. –û–ø–∞—Å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã (–±–∞—Ç–∞—Ä–µ–π–∫–∏, –ª–∞–º–ø—ã) - —Å–¥–∞–≤–∞–π—Ç–µ –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –ø—Ä–∏–µ–º–∞.\n"
    "7. –¢–µ–∫—Å—Ç–∏–ª—å - —Å–¥–∞–≤–∞–π—Ç–µ –Ω–µ–Ω—É–∂–Ω—É—é –æ–¥–µ–∂–¥—É –≤ –ø—É–Ω–∫—Ç—ã –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∏–ª—è.\n"
    "\nüîç –ü–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –£—Ç–æ—á–Ω—è–π—Ç–µ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–∞ –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è."
)


@router.message(Command("info"))
async def cmd_info(message: Message):
    await message.answer(info_text)

@router.callback_query(F.data == "info")
async def cmd_info(callback: CallbackQuery):
    callback.answer('')
    await callback.message.answer(info_text)


@router.message(Command("quiz"))
async def cmd_quiz(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="quiz_yes")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="quiz_no")]
    ])
    await message.answer("‚ôªÔ∏è –í–æ–ø—Ä–æ—Å 1: –ú–æ–∂–Ω–æ –ª–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –±–∞—Ç–∞—Ä–µ–π–∫–∏ –≤ –æ–±—ã—á–Ω—ã–π –º—É—Å–æ—Ä?", reply_markup=keyboard)


@router.callback_query(F.data=="quiz")
async def cmd_quiz(callback: CallbackQuery):
    await callback.answer('')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="quiz_yes")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="quiz_no")]
    ])
    await callback.message.answer("‚ôªÔ∏è –í–æ–ø—Ä–æ—Å 1: –ú–æ–∂–Ω–æ –ª–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –±–∞—Ç–∞—Ä–µ–π–∫–∏ –≤ –æ–±—ã—á–Ω—ã–π –º—É—Å–æ—Ä?", reply_markup=keyboard)


@router.callback_query(F.data == "quiz_yes")
async def quiz_yes(callback: CallbackQuery):
    await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ë–∞—Ç–∞—Ä–µ–π–∫–∏ –Ω—É–∂–Ω–æ —Å–¥–∞–≤–∞—Ç—å –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã.", show_alert=True)
    await callback.message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Ä–∞–∑–¥–µ–ª '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –º—É—Å–æ—Ä–∞'. üìò")


@router.callback_query(F.data == "quiz_no")
async def quiz_no(callback: CallbackQuery):
    await callback.answer("‚úÖ –í–µ—Ä–Ω–æ! –ë–∞—Ç–∞—Ä–µ–π–∫–∏ –Ω—É–∂–Ω–æ —Å–¥–∞–≤–∞—Ç—å –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã.", show_alert=True)
    await callback.message.answer("–ú–æ–ª–æ–¥–µ—Ü! –í—ã –æ—Ç–ª–∏—á–Ω–æ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –º—É—Å–æ—Ä–∞. üåç")
    await cmd_quiz_2(callback.message)


@router.callback_query(F.data == "quiz_2")
async def cmd_quiz_2(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="quiz_2_yes")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="quiz_2_no")]
    ])
    await message.answer("üìù –í–æ–ø—Ä–æ—Å 2: –ú–æ–∂–Ω–æ –ª–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å—Ç–µ–∫–ª–æ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–ª–∞—Å—Ç–∏–∫–∞?", reply_markup=keyboard)


@router.callback_query(F.data == "quiz_2_yes")
async def quiz_2_yes(callback: CallbackQuery):
    await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –°—Ç–µ–∫–ª–æ –¥–æ–ª–∂–Ω–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç–µ–∫–ª–∞.", show_alert=True)
    await callback.message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Ä–∞–∑–¥–µ–ª '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –º—É—Å–æ—Ä–∞'. üìò")


@router.callback_query(F.data == "quiz_2_no")
async def quiz_2_no(callback: CallbackQuery):
    await callback.answer("‚úÖ –í–µ—Ä–Ω–æ! –°—Ç–µ–∫–ª–æ –¥–æ–ª–∂–Ω–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç–µ–∫–ª–∞.", show_alert=True)
    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ! –£ –≤–∞—Å —Ö–æ—Ä–æ—à–µ–µ –∑–Ω–∞–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏. üåç")
    await cmd_quiz_3(callback.message)

@router.callback_query(F.data == "quiz_3")
async def cmd_quiz_3(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="quiz_3_yes")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="quiz_3_no")]
    ])
    await message.answer("üßª –í–æ–ø—Ä–æ—Å 3: –ú–æ–∂–Ω–æ –ª–∏ —Å–¥–∞–≤–∞—Ç—å –≥—Ä—è–∑–Ω—É—é –±—É–º–∞–≥—É –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É?", reply_markup=keyboard)


@router.callback_query(F.data == "quiz_3_yes")
async def quiz_3_yes(callback: CallbackQuery):
    await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ë—É–º–∞–≥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å—Ç–æ–π –∏ —Å—É—Ö–æ–π –¥–ª—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏.", show_alert=True)
    await callback.message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Ä–∞–∑–¥–µ–ª '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –º—É—Å–æ—Ä–∞'. üìò")


@router.callback_query(F.data == "quiz_3_no")
async def quiz_3_no(callback: CallbackQuery):
    await callback.answer("‚úÖ –í–µ—Ä–Ω–æ! –ë—É–º–∞–≥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å—Ç–æ–π –∏ —Å—É—Ö–æ–π –¥–ª—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏.", show_alert=True)
    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—Å–µ –±–æ–ª—å—à–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∏—Å—å –≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –º—É—Å–æ—Ä–∞. üåç")
    await cmd_quiz_4(callback.message)

@router.callback_query(F.data == "quiz_4")
async def cmd_quiz_4(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="quiz_4_yes")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="quiz_4_no")]
    ])
    await message.answer("üõ¢Ô∏è –í–æ–ø—Ä–æ—Å 4: –ú–æ–∂–Ω–æ –ª–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –º–æ—Ç–æ—Ä–Ω–æ–µ –º–∞—Å–ª–æ –≤ –æ–±—ã—á–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç—Ö–æ–¥–æ–≤?", reply_markup=keyboard)


@router.callback_query(F.data == "quiz_4_yes")
async def quiz_4_yes(callback: CallbackQuery):
    await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ú–æ—Ç–æ—Ä–Ω–æ–µ –º–∞—Å–ª–æ –¥–æ–ª–∂–Ω–æ —É—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö.", show_alert=True)
    await callback.message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Ä–∞–∑–¥–µ–ª '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –º—É—Å–æ—Ä–∞'. üìò")


@router.callback_query(F.data == "quiz_4_no")
async def quiz_4_no(callback: CallbackQuery):
    await callback.answer("‚úÖ –í–µ—Ä–Ω–æ! –ú–æ—Ç–æ—Ä–Ω–æ–µ –º–∞—Å–ª–æ –¥–æ–ª–∂–Ω–æ —É—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö.", show_alert=True)
    await callback.message.answer("–ú–æ–ª–æ–¥–µ—Ü! –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ä–æ—à–æ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –º—É—Å–æ—Ä–∞. üåç")


@router.message(Registry.start_chat)
async def chat_gigachat(message: Message):
    id = message.from_user.id
    response = await chat_completion(id, message.text)
    await message.answer(response, parse_mode=ParseMode.MARKDOWN)


async def set_commands(bot):
    commands = [
        BotCommand(command="help", description="‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"),
        BotCommand(command="menu", description="üçî –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
        BotCommand(command="info", description="‚ôªÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –º—É—Å–æ—Ä–∞"),
        BotCommand(command="quiz", description="üéØ –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"),
        BotCommand(command="subscribe", description="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–≤–µ—Ç–æ–≤"),
        BotCommand(command="unsubscribe", description="üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–≤–µ—Ç–æ–≤"),
        BotCommand(command="start_chat", description="üí¨ –í–∫–ª—é—á–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–æ–º"),
        BotCommand(command="stop_chat", description="üîï –í—ã–∫–ª—é—á–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–æ–º")
    ]
    await bot.set_my_commands(commands, scope=BotCommandScopeDefault())


@router.message()
async def prtext(message: Message):
    await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

